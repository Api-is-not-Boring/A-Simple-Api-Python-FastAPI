# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Automate Api Test

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  Api-Test:
    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest" ]
        include:
          - os: "ubuntu-latest"
            postman-cli: "https://dl-cli.pstmn.io/install/linux64.sh"
          - os: "macos-latest"
            postman-cli: "https://dl-cli.pstmn.io/install/osx_64.sh"
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1.3.3
      with:
        version: 1.3.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3.2.2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install library
      run: poetry install --no-interaction

    - name: Run App
      run: |
        source $VENV
        python3 main.py &

    - name: Install Postman CLI
      run: |
        curl -o- ${{ matrix.postman-cli }} | sh

    - name: Login to Postman CLI
      run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
    - name: Run API tests
      run: |
        postman collection run "7779863-874f5270-9a2e-448e-a963-87f8b9b0cbbd" -e "7779863-a2096246-922a-440d-9863-d540e8ff461d"
